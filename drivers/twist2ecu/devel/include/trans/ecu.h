// Generated by gencpp from file trans/ecu.msg
// DO NOT EDIT!


#ifndef TRANS_MESSAGE_ECU_H
#define TRANS_MESSAGE_ECU_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>

namespace trans
{
template <class ContainerAllocator>
struct ecu_
{
  typedef ecu_<ContainerAllocator> Type;

  ecu_()
    : header()
    , motor(0.0)
    , steer(0.0)
    , brake(false)
    , cur_speed(0.0)
    , speed_ratio(0.0)
    , shift(0)  {
    }
  ecu_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , motor(0.0)
    , steer(0.0)
    , brake(false)
    , cur_speed(0.0)
    , speed_ratio(0.0)
    , shift(0)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef float _motor_type;
  _motor_type motor;

   typedef float _steer_type;
  _steer_type steer;

   typedef uint8_t _brake_type;
  _brake_type brake;

   typedef float _cur_speed_type;
  _cur_speed_type cur_speed;

   typedef float _speed_ratio_type;
  _speed_ratio_type speed_ratio;

   typedef uint8_t _shift_type;
  _shift_type shift;



// reducing the odds to have name collisions with Windows.h 
#if defined(_WIN32) && defined(SHIFT_UNKNOWN)
  #undef SHIFT_UNKNOWN
#endif
#if defined(_WIN32) && defined(SHIFT_D)
  #undef SHIFT_D
#endif
#if defined(_WIN32) && defined(SHIFT_N)
  #undef SHIFT_N
#endif
#if defined(_WIN32) && defined(SHIFT_R)
  #undef SHIFT_R
#endif
#if defined(_WIN32) && defined(SHIFT_T)
  #undef SHIFT_T
#endif

  enum {
    SHIFT_UNKNOWN = 0u,
    SHIFT_D = 1u,
    SHIFT_N = 2u,
    SHIFT_R = 3u,
    SHIFT_T = 9u,
  };


  typedef boost::shared_ptr< ::trans::ecu_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::trans::ecu_<ContainerAllocator> const> ConstPtr;

}; // struct ecu_

typedef ::trans::ecu_<std::allocator<void> > ecu;

typedef boost::shared_ptr< ::trans::ecu > ecuPtr;
typedef boost::shared_ptr< ::trans::ecu const> ecuConstPtr;

// constants requiring out of line definition

   

   

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::trans::ecu_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::trans::ecu_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::trans::ecu_<ContainerAllocator1> & lhs, const ::trans::ecu_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.motor == rhs.motor &&
    lhs.steer == rhs.steer &&
    lhs.brake == rhs.brake &&
    lhs.cur_speed == rhs.cur_speed &&
    lhs.speed_ratio == rhs.speed_ratio &&
    lhs.shift == rhs.shift;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::trans::ecu_<ContainerAllocator1> & lhs, const ::trans::ecu_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace trans

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::trans::ecu_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::trans::ecu_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::trans::ecu_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::trans::ecu_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::trans::ecu_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::trans::ecu_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::trans::ecu_<ContainerAllocator> >
{
  static const char* value()
  {
    return "59bf7eba7675d619ecb8c5ad9e66f08b";
  }

  static const char* value(const ::trans::ecu_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x59bf7eba7675d619ULL;
  static const uint64_t static_value2 = 0xecb8c5ad9e66f08bULL;
};

template<class ContainerAllocator>
struct DataType< ::trans::ecu_<ContainerAllocator> >
{
  static const char* value()
  {
    return "trans/ecu";
  }

  static const char* value(const ::trans::ecu_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::trans::ecu_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Header header\n"
"\n"
"float32 motor # 目标速度\n"
"float32 steer # 转向\n"
"bool brake # 紧急停车\n"
"float32 cur_speed # 当前速度\n"
"float32 speed_ratio # 控制速度比率的\n"
"\n"
"uint8 shift # 档位\n"
"uint8 SHIFT_UNKNOWN = 0 \n"
"uint8 SHIFT_D = 1 #前进档位\n"
"uint8 SHIFT_N = 2 #停止档位\n"
"uint8 SHIFT_R = 3 #后退档位\n"
"uint8 SHIFT_T = 9 #遥控\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
;
  }

  static const char* value(const ::trans::ecu_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::trans::ecu_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.motor);
      stream.next(m.steer);
      stream.next(m.brake);
      stream.next(m.cur_speed);
      stream.next(m.speed_ratio);
      stream.next(m.shift);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ecu_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::trans::ecu_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::trans::ecu_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "motor: ";
    Printer<float>::stream(s, indent + "  ", v.motor);
    s << indent << "steer: ";
    Printer<float>::stream(s, indent + "  ", v.steer);
    s << indent << "brake: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.brake);
    s << indent << "cur_speed: ";
    Printer<float>::stream(s, indent + "  ", v.cur_speed);
    s << indent << "speed_ratio: ";
    Printer<float>::stream(s, indent + "  ", v.speed_ratio);
    s << indent << "shift: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.shift);
  }
};

} // namespace message_operations
} // namespace ros

#endif // TRANS_MESSAGE_ECU_H
